#No spaces allowed around =
DEF maxX=700e-10
DEF minX=-200e-10
DEF tau=8e-15
DEF phase=0.5*3.14159265
DEF duration=350e-15
DEF peakEnvT=50e-15
DEF pulseSmoothTime=10e-15
DEF qe=1.602e-19
#No spaces allowed around *
DEF ef=9.2*qe
DEF w=6.2*qe
DEF err=1
DEF jellCent=0
DEF atomCent=0
DEF atomicSpacing=2.5e-10
DEF effZ=1.74
DEF shieldingLam=1e-10
DEF tipRadius=20e-9
DEF maxEnhancement=12
DEF absEdgeSize=80e-10
DEF absEdgeRate=0.75
#No spaces allowed around , or |
DEF_ARR emax=5,10,15,20|*1e9
DEF_ARR lams=800,1000,1200,1400,1600,1800,2000|*1e-9

This is something that the parser doesn't understand, so it prepends it with a -.
#This is a comment because it starts with a pound sign.
#To add measurers, potentials, or absorptive regions, go to the source code and read the proper instructions
#in the ThreadParser.h header file.
#Note that, while I will comment next to interpreted code, comments should be only on separate lines

FINISH_DEF
#Passes to ThreadParser.cpp for each combination of array entries
#Now we are in the parallel parser regime. Nothing except for errors (and possibly initialization results) get printed now.
#These comments also do not get printed.
#When using variables, you may add and multiply in the following sense: err+-1*5 (basically err-5).
#Using an array variable will refer to whatever value in that array the thread was assigned.
#You cannot define more variables now.

SAVE_LOC data/testwigner/lam~lams*1e9~emax~emax*1e-9~/
#Sets the save location for this simulation.
#Entries with ~val~ evaluate the val and use it as part of the file name. It is truncated to be an integer.
#You should have one of these for each array variable, otherwise the simulations will keep overwriting the same data.


#Potential functions. Only the first function will show how to input variables, all others will just show the parameters.
#If passing a string instead of a number, prepend the entry with "

NEW_GEN_SIM
X_MIN val
X_MAX val
T_MAX val
DX val
DT val
END

#DEN_CAL Sets the density (weights) calculator. Should be declared before any potential that uses it.
#Failure to do so may lead to undefined behavior.
#No declaration at all defaults to a void density (okay if you have no density-dependent potentials).

#Calculates the density assuming a 3-D Fermi gas (and existing states range from -W-Ef to -W)
DEN_CAL FermiGas
FERMI_E val
END

#Calculates density using DOS file (DOS should be centered such that E=0 is the Fermi level)
#Fermi energy helps to calculate effective well size
#Fermi level is the Fermi level of this simulation, typically -W
DEN_CAL FromDOSFile
FILE "str
FERMI_E val
FERMI_LEVEL val
WELL_LENGTH val
END


#RHO_CAL Sets the density (rho) calculator. Should be declared before any potential that uses it.
#Failure to do so may lead to undefined behavior.
#No declaration at all defaults to a void density (okay if you have no density-dependent potentials).

#The density is simply the local density according to |\psi^2|, weighted by the weight calculations.
RHO_CAL Direct

#The density is smoothed by a Gaussian of stdev SIGMA (SI units).
RHO_CAL GaussSmooth
SIGMA val
END


#Jellium potential with smoothing function transition at back.
ADD_POT BackedJell
CENTER jellCent
FERMI_E ef
WORK_F w
BACK_START minX+absEdgeSize
BACK_WIDTH absEdgeSize*0.5
REF_POINT maxX #Point where potential is set to be zero (must be specified for each potential)
END

#Standard Jellium potential
ADD_POT Jellium
CENTER val #Center of Jellium potential. Note that incident field should begin at imaginary plane (calculate).
FERMI_E val
WORK_F val
REF_POINT val
END

#Standard surface atomic potential
ADD_POT ShieldedAtomicPotential
CENTER val
LATTICE_SPACING val
Z_PROTONS val
DECAY_CONST val
END

#Square well potential
ADD_POT FiniteBox
MIN_X val
MAX_X val
V_IN val #Potential in well
REF_POINT val
END

#External sinusoidal field with constant strength within a region, gaussian pulse in time.
ADD_POT GaussianPulseFlat
MIN_X val
MAX_X val
MAX_E val #Peak field strength (doesn't include effect of envelope on max strength)
LAM val #Wavelength
TAU val #FWHM Power
PEAK_T val #Time at which envelope is at peak
PHASE val #CEP of pulse, 0 is cosine-like (pulling out at envelope peak), pi/2 negative-sine-like (pulling out before pushing back in at peak)
BUFFER_TIME val #Polynomial-smoothed initialization, avoids unphysical emissions
REF_POINT val
END

#External sinusoidal field with 1/r dependence strength, gaussian in time.
ADD_POT GaussianPulseCylindrical
MIN_X val
MAX_X val
RADIUS val #Radius of blade edge
MAX_E val
ENHANCEMENT val #Enhancement factor
LAM val
TAU val
PEAK_T val
PHASE val
BUFFER_TIME val
REF_POINT val
END

#Same as before, ensures there is no field near the edge of the simulation.
ADD_POT CutoffGaussianPulseCylindrical
MIN_X val
MAX_X val
RADIUS val
MAX_E val
ENHANCEMENT val
LAM val
TAU val
PEAK_T val
PHASE val
BUFFER_TIME val
REF_POINT val
BUFFER_LENGTH val
END

#Exponential profile. Linear tangent used to reach zero field at MAX_X
#Linear form persists from MAX_X - RADIUS to MAX_X
ADD_POT GaussianPulseExponential
MIN_X val
MAX_X val
RADIUS val
MAX_E val
LAM val
TAU val
PEAK_T val
PHASE val
BUFFER_TIME val
REF_POINT val
END

#External sinusoidal field with 1/r dependence strength, gaussian in time.
ADD_POT Cos2PulseCylindrical
MIN_X val
MAX_X val
RADIUS val #Radius of blade edge
MAX_E val
ENHANCEMENT val #Enhancement factor
LAM val
TAU val
PEAK_T val
PHASE val
REF_POINT val
END

#Same as before, ensures there is no field near the edge of the simulation.
ADD_POT CutoffCos2PulseCylindrical
MIN_X val
MAX_X val
RADIUS val
MAX_E val
ENHANCEMENT val
LAM val
TAU val
PEAK_T val
PHASE val
REF_POINT val
BUFFER_LENGTH val
END

#Exponential profile. Linear tangent used to reach zero field at MAX_X
#Linear form persists from MAX_X - RADIUS to MAX_X
ADD_POT Cos2PulseExponential
MIN_X val
MAX_X val
RADIUS val
MAX_E val
LAM val
TAU val
PEAK_T val
PHASE val
REF_POINT val
END

#Basic plasmonic penetrating field (should just use numerical results)
ADD_POT BasicPenetratingField
MIN_X val
MAX_X val
MAX_E val
LAM val
TAU val
PHASE val
PEAK_T val
BUFFER_TIME val
EPSILON_REL_REAL val
EPSILON_REL_IMAG val
CONDUCTIVITY val
REF_POINT val
END

#Potential from binary file
ADD_POT FilePotential
FILE "str
OFFSET val
REF_POINT val
END

#Wavefunction-dependent potential that is effectively an electron-electron interaction potential.
ADD_POT SelfCoulomb
STRENGTH val
PERP_DIST val #Effective distance of "other" electron perpendicular to the axis of simulation
REF_POINT val
END

#Wavefunction-dependent potential, assumes planar charge throughout all space
#Will calculate the proper conversion between 1-D TDSE density and 3-D planar density
#using just the fermi energy, assuming system is a metallic Jellium slab
ADD_POT UniformSurfaceSpaceCharge
FERMI_E val
MIN_X val
MAX_X val
REF_POINT val
END

#Assumes particles disperse in cylinders
#Total charge is conserved, aside from BC's
ADD_POT FullCylindricalSpaceCharge
FERMI_E val
RADIUS val
SURF_X val
MIN_X val
MAX_X val
REF_POINT val
END

#Treats bulk region as planar and field as cylindrical
#Appropriately calculates fields, taking into account
#changes in geometries
ADD_POT LinearBulkCylindricalFieldSpaceCharge
FERMI_E val
RADIUS val
SURF_X val
MIN_X val
MAX_X val
REF_POINT val
END

#Calculates the vacuum potential assuming
#cylindrical charge rings and an equal image
#charge at the surface. A masking decaying on
#at the rate that the Fermi level decays into
#vacuum is applied to smooth the potential
ADD_POT CylindricalImageCharge
WORK_F val
FERMI_E val
RADIUS val
SURF_X val
MIN_X val
MAX_X val
REF_POINT val
END

#Treats bulk region as a smoothed dielectric and field as cylindrical
#Appropriately calculates fields, taking into account
#changes in geometries
#Set WELL_WIDTH <= 0 to let the code calculate an effective well width
#DAMP_RATE should ideally be abs( e_i/(w(e_r-1)) )
#	with e_i and e_r imaginary and real portions of relative dielectric
#	and w laser frequency
ADD_POT DielectricBulkCylindricalFieldSpaceCharge
FERMI_E val
RADIUS val
SURF_X val
WELL_WIDTH val
DAMP_RATE val
MIN_X val
MAX_X val
REF_POINT val
END

#Treats bulk region as planar and field as a cylindrical section
#Same as above, but not full cylinder (takes lots of RAM and slower)
ADD_POT LinearBulkCylSectionFieldSpaceCharge
FERMI_E val
RADIUS val
SURF_X val
THETA_0 val
REF_POINT val
END


#Static electric field
ADD_POT BiasField
MIN_X val
MAX_X val
BUFFER_X_MIN val
BUFFER_X_MAX val
E_FIELD val
T_START val
BUFFER_TIME val
REF_POINT val
END

#Oscillatory electric field from (complex) file field profile. Smoothed Gaussian profile.
ADD_POT GaussFileField
FILE "str
OFFSET val
BUFFER_X_MIN val
BUFFER_X_MAX val
BUFFER_LENGTH val
MAX_E val
LAM val
TAU val
PEAK_T val
PHASE val
BUFFER_TIME val
REF_POINT val
END

#Above, but cos-squared field profile. Pulse terminates 1.37341*TAU from center
ADD_POT Cos2FileField
FILE "str
OFFSET val
BUFFER_X_MIN val
BUFFER_X_MAX val
BUFFER_LENGTH val
MAX_E val
LAM val
TAU val
PEAK_T val
PHASE val
REF_POINT val
END

#Applies retarding field according to Ohm's law
ADD_POT OhmicRetardingCurrent
SURF_X val
TRANS_LEN val
RESISTIVITY val
REF_POINT val
END

#Absorptive regions.

ADD_ABS SmoothedRight
SIZE val
RATE val
END

ADD_ABS SmoothedLeft
SIZE val
RATE val
END

#Measurers.

#Includes various other measurers (NPts, Header, NSteps, DX, DT)
ADD_MEA BasicMeasurers
NAME "str
END

#Measures the downsampled potential as the simulation progresses
ADD_MEA VFuncT
N_X val #Number of spatial points
N_T val #Number of temporal points
END

#Virtual detector measuring the wave function
ADD_MEA VDPsi
NAME "str
VD_NUM val #ID Number of VD, should be unique from any other VDPsi's (but can be the same as VD's of other varieties)
VD_POS val #Position of VD
END

#Two VD's spaced by dx
ADD_MEA VDBiPsi
NAME "str
VD_NUM_0 val
VD_NUM_1 val
VD_POS val
END

#VD for probability current
ADD_MEA VDProbCurrent
NAME "str
VD_NUM val
VD_POS val
END

#VD for potential
ADD_MEA VDPot
NAME "str
VD_NUM val
VD_POS val
END

#Two VD's spaced by dx
ADD_MEA VDBiPot
NAME "str
VD_NUM_0 val
VD_NUM_1 val
VD_POS val
END

#Measures temporal DFT of wavefunction at two points
#For efficiently storing sufficient information to
#reconstruct flux spectrum
ADD_MEA VDFluxSpec
NAME "str
VD_NUM val
VD_POS val
E_MAX  val #Maximal energy for spectrum, J, exclusive
N_SAMP val #Number of spectral sample points
END

#Records the wave function at a set time (not technically a VD, but treated as one)
ADD_MEA PsiT
NAME "str
VD_NUM val
MEA_T val
END

#Records the potential at a set time
ADD_MEA PotT
NAME "str
VD_NUM val
MEA_T val
END

#If a measurer doesn't need any parameters, you just need the first line.
#Measures the total probability throughout the simulation time
ADD_MEA TotProb

#Expectation value of acceleration
ADD_MEA ExpectA

#Expectation value of momentum
ADD_MEA ExpectP

#Expectation value of position
ADD_MEA ExpectX

#Expectation value of energy
ADD_MEA ExpectE

#Expectation value of energy at the first time step
ADD_MEA ExpectE0

#Downsampled probability density as a function of time (just like VFuncT)
ADD_MEA Psi2T
N_X val
N_T val
END

#Potential at t=0
ADD_MEA V0

#Time grid
ADD_MEA TS

#Position grid
ADD_MEA XS

#Time spacing
ADD_MEA DT

#Space spacing
ADD_MEA DX

#Number of time steps
ADD_MEA NSteps

#Number of space grid points
ADD_MEA nPts

#The weight of each wavefunction to the total electron density
#sum_i w_i|\psi(x)|^2 = \rho(x) [e/m^3]
ADD_MEA WfcRhoWeights

#Header file of simulation (not all that important, but feel free to put in a 4 character identifier)
ADD_MEA Header
NAME "str
END

#The file name here should not include the extension, .tdsePART will be added automatically.
#Records a constant of type double, can be an array element
ADD_MEA DoubleConst
FIL_NAME "str
CONST val
END

#Measures the Wigner Quasi-Probability Distribution as a function of time.
ADD_MEA WignerQPD
N_X val
N_P val
N_T val
P_MIN val
P_MAX val
END

#Finish initialization, find ground state through imaginary time propagation, then run
#using some parallelization and log progress in prog.txt
#Exit when done.

FINISH_INIT


#SET_KIN sets the current kinetic operator
#Should be done here or at the very beginning
#Allows for simple switching between models (i.e., find states using FDM, propagate with PSM)

#Uniform free electron pseudospectral method (PSM), with effective mass in units of electron mass
SET_KIN FreeElecPSM
M_EFF val
END

#EXPR is an equation of k which is the kinetic energy, can be any parsable formula by exprtk
#Units are SI... previously set variables are non-parsable
SET_KIN MathExprPSM
EXPR "str
END

#A boundary between two regions with different effective masses (in units of electron mass)
#EXP_ORDER is the order of the expansion used
#FORCE_NORM forces the normalization of the wavefunction during kinetic propagation
SET_KIN EffMassBdyPSM
M_EFF_L val
M_EFF_R val
TRANS_RATE val
TRANS_POS val
EDGE_RATE val
EXP_ORDER val
FORCE_NORM val
END

#A boundary between any number of dispersion relations
#Should be a function of k, then a ~, then a (normally parsable like before) transition position, transition rate, and repeat
#last does not need trans pos/rate
SET_KIN MathExprBdyPSM
EXPR "6.104e-39*k^2~pos0~trans0~2e6*abs(k)~pos1~trans1~6.104e-39*k^2
EXP_ORDER val
FORCE_NORM val
END


#Finds the eigenstates in the energy range from el to eu using the current Kinetic operator
FIND_EIGENS el eu

#Negates the self-potential of the system for nonlinear calculations
NEGATE_SELF_POT_INITIAL_STATE

#For pseudospectral kinetic operators (whichever was the latest)
#Runs in one step
RUN_OS_U2TU

#Same as above, but potential is updated after the kinetic step
#Applicable for nonlinear calculations
RN_OS_OW2TUW

EXIT